// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Vendor recommendation flow.
 *
 * This file defines a Genkit flow that takes project requirements as input and
 * returns a ranked list of vendors that best match those requirements.
 *
 * @interface VendorRecommendationInput - Defines the input schema for the vendor recommendation flow.
 * @interface VendorRecommendationOutput - Defines the output schema for the vendor recommendation flow.
 * @function recommendVendors - The main function to trigger the vendor recommendation flow.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

/**
 * Defines the input schema for the vendor recommendation flow.
 */
const VendorRecommendationInputSchema = z.object({
  scope: z.string().describe('The scope of the project.'),
  budget: z.number().describe('The budget for the project.'),
  location: z.string().describe('The location of the project.'),
  preferredVendorAttributes: z
    .string()
    .describe('The preferred attributes of the vendor.'),
});

export type VendorRecommendationInput = z.infer<
  typeof VendorRecommendationInputSchema
>;

/**
 * Defines the output schema for the vendor recommendation flow.
 */
const VendorRecommendationOutputSchema = z.array(z.object({
  vendorName: z.string().describe('The name of the vendor.'),
  matchScore: z.number().describe('The score indicating how well the vendor matches the requirements.'),
}));

export type VendorRecommendationOutput = z.infer<
  typeof VendorRecommendationOutputSchema
>;

/**
 * Main function to trigger the vendor recommendation flow.
 *
 * @param input - The input object conforming to the VendorRecommendationInputSchema.
 * @returns A promise that resolves to the VendorRecommendationOutput.
 */
export async function recommendVendors(
  input: VendorRecommendationInput
): Promise<VendorRecommendationOutput> {
  return vendorRecommendationFlow(input);
}

const vendorRecommendationPrompt = ai.definePrompt({
  name: 'vendorRecommendationPrompt',
  input: {schema: VendorRecommendationInputSchema},
  output: {schema: VendorRecommendationOutputSchema},
  prompt: `You are a vendor recommendation agent. You will receive project requirements such as scope, budget, location, and preferred vendor attributes.

Based on these requirements, you will provide a ranked list of vendors that best match those requirements.

Project Scope: {{{scope}}}
Project Budget: {{{budget}}}
Project Location: {{{location}}}
Preferred Vendor Attributes: {{{preferredVendorAttributes}}}

Return a ranked list of vendors that best match the project requirements, sorted by matchScore in descending order.
`,
});

const vendorRecommendationFlow = ai.defineFlow(
  {
    name: 'vendorRecommendationFlow',
    inputSchema: VendorRecommendationInputSchema,
    outputSchema: VendorRecommendationOutputSchema,
  },
  async input => {
    const {output} = await vendorRecommendationPrompt(input);
    return output!;
  }
);
